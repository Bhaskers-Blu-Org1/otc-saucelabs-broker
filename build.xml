<project name="otc-saucelabs-broker" default="dist">

    <defaultexcludes add="**/.ahs.dig" />
    <defaultexcludes add="**/.ahs.manifest" />
    <defaultexcludes add="**/*.bom" />
    <defaultexcludes add="**/.git*" />
    <defaultexcludes add="**/.mailmap" />

    <property environment="env"/>

  <!-- ==================================================================
       ENVIRONMENTAL DETECTION
       ================================================================== -->
  <condition property="git" value="git.cmd">
      <and>
          <os family="windows" />
          <available filepath="${env.Path}" file="git.cmd" type="file"/>
      </and>
  </condition>
  <condition property="git" value="git.exe">
      <and>
          <os family="windows" />
          <available filepath="${env.Path}" file="git.exe" type="file"/>
      </and>
  </condition>
  <condition property="git" value="git">
      <not>
          <os family="windows" />
      </not>
  </condition>
  <condition property="npm" value="npm.cmd">
      <and>
          <os family="windows" />
          <available filepath="${env.Path}" file="npm.cmd" type="file"/>
      </and>
  </condition>
  <condition property="npm" value="npm">
      <not>
          <os family="windows" />
      </not>
  </condition>

    <!-- ==================================================================
         MACROS
         ================================================================== -->

    <macrodef name="locate-file-path"
          description="Locate a single file within a @{dir} (fail if not exactly one match found) and store the single file fileset in @{property}.file and path string in @{property}.path">
      <attribute name="dir"/>
      <!-- the base directory -->
      <attribute name="name"/>
      <!-- pattern for the name of the file to locate relative to @{dir} -->
      <attribute name="property"/>
      <!-- the prefix for the path property and the fileset id  -->

      <sequential>
        <fileset id="@{property}.file" dir="@{dir}" includes="@{name}">
          <depth max="1"/>
        </fileset>
        <fail message="No match found for @{name} (@{type}) in @{dir}">
          <condition>
            <resourcecount refid="@{property}.file" count="0"/>
          </condition>
        </fail>
        <fail message="Multiple matches for @{name} (@{type}) found in @{dir}">
          <condition>
            <resourcecount refid="@{property}.file" when="ne" count="1"/>
          </condition>
        </fail>
        <property name="@{property}.name" refid="@{property}.file"/>
        <pathconvert property="@{property}.path" refid="@{property}.file"/>
      </sequential>
    </macrodef>

    <!-- ==================================================================
         PLATFORM PATTERNSETS
         ================================================================== -->

    <patternset id="binary.patternset">
      <include name="**/*.dll"/>
      <include name="**/*.exe"/>
      <include name="**/*.gz" />
      <include name="**/*.jar"/>
      <include name="**/*.tar"/>
      <include name="**/*.tgz"/>
      <include name="**/*.zip"/>
    </patternset>

    <patternset id="win.exec.patternset">
      <include name="**/*.bat"/>
      <include name="**/*.cmd"/>
      <include name="**/*.exe"/>
      <include name="**/*.vbs"/>
    </patternset>

    <patternset id="win.fixcrlf.patternset">
      <include name="**/*.bat"/>
      <include name="**/*.cmd"/>
      <include name="**/*.vbs"/>
    </patternset>

    <!-- items which should be executable in our tar.gz and zip files -->
    <patternset id="unix.exec.patternset">
      <include name="**/*.sh" />
      <include name="**/*.pl" />
      <include name="**/*.py" />
      <include name="java/bin/*"/>
      <include name="opt/apache-ant*/bin/*" />
      <include name="opt/groovy*/bin/*" />
    </patternset>

    <patternset id="unix.fixcrlf.patternset">
      <include name="**/*.sh" />
      <include name="bin/**" />
      <include name="opt/apache-ant*/bin/*" />
      <include name="opt/groovy*/bin/*" />

      <!-- exclude binary files and windows specific scripts -->
      <invert>
        <patternset refid="win.fixcrlf.patternset"/>
      </invert>
      <invert>
        <patternset refid="binary.patternset"/>
      </invert>
    </patternset>

    <!-- ==================================================================
         PROJECT CONFIGURATION
         ================================================================== -->
    <property name="project" value="${ant.project.name}"/>
    <property name="build.life.id" value="${env.BUILD_LIFE_ID}"/>
    <property name="version" value="1.0.0"/>

    <property name="ub.project.name" value="${project}"/>
    <property name="ub.workflow.name" value="Build"/>
    <property name="install.webapp.name" value="ROOT"/>

    <!-- ==================================================================
         LOCATIONS OF PROJECT ELEMENTS
         ================================================================== -->
    <property name="build.dir" location="build" />
	<property name="src.dir" location="." />

    <!-- ==================================================================
         LOCATIONS OF BUILD ARTIFACTS
         ================================================================== -->
    <property name="dist.dir" location="dist" />

    <!-- ===================================================================
         STANDARD TARGETS
         =================================================================== -->
    <target name="dist" depends="dist-main"
        description="Create a complete distributable for the project. A build server should run this target."/>

    <!-- ==================================================================
         DIST
         ================================================================== -->

    <target name="dist-main" depends="clean, set-revision, install-dependencies">
        <tstamp>
          <format property="now" pattern="yyyy-MM-dd HH:mm:ss Z"/>
        </tstamp>
        <echo file="build_info.json" append="false">{
  "time": "${now}",
  "build": "${version}",
  "revision": "${revision}"
}</echo>
        <property name="package.excludes" value="build.xml, .*, .*/**, **/node_modules/grunt*/**, **/phantomjs/**, **/selenium-standalone/**, **/wd-sync/**, **/.bin/**/*,config-*.json"/>
        <delete file="${dist.dir}/${project}.zip"/>
        <zip destfile="${dist.dir}/${project}.zip" duplicate="fail">
            <zipfileset dir="${src.dir}" prefix="otc-saucelabs-broker" excludes="${package.excludes}"/>
        </zip>
        <delete file="${dist.dir}/${project}.tar.gz"/>
        <tar destfile="${dist.dir}/${project}.tar.gz" compression="gzip" longfile="gnu">
          <tarfileset dir="${src.dir}" prefix="otc-saucelabs-broker" excludes="${package.excludes}" />
        </tar>
    </target>


    <target name="install-dependencies" description="Installs the production only node dependencies">
        <exec executable="${npm}">
            <arg value="install"/>
            <arg value="--production"/>
        </exec>
    </target>

    <!-- ==================================================================
         OTHER
         ================================================================== -->
    <target name="clean">
        <delete includeemptydirs="true" failonerror="false">
          <fileset dir="${dist.dir}" includes="**/*" defaultexcludes="false"/>
        </delete>
        <delete includeemptydirs="true" failonerror="false">
          <fileset dir="${build.dir}" includes="**/*" defaultexcludes="false"/>
        </delete>
    </target>

  <target name="set-revision" unless="revision">
      <exec executable="${git}" outputproperty="revision">
          <arg value="rev-parse"/>
          <arg value="--verify"/>
          <arg value="HEAD"/>
      </exec>
  </target>

</project>

